using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Diagnostics;

namespace PDFRider
{
    public enum SelectionStates
    {
        InsideDocument,
        EntireDocument,
        OutOfDocument
    }

    public enum InsertPositions
    {
        Beginning,
        End,
        Custom
    }

    /// <summary>
    /// Contains properties and methods for working with the PDF document.
    /// </summary>
    public class PDFDocument
    {
        private static string baseDir = AppDomain.CurrentDomain.BaseDirectory;

        //File generated by the dump_data function of pdftk:
        //it contains various informations about the pdf file.
        private const string DUMP_DATA_FILE_NAME = "pdfdata.txt";
        private static string DUMP_DATA_FILE = Path.Combine(baseDir, DUMP_DATA_FILE_NAME);

        private static char[] PDF_HANDLES = new char[10] {'A','B','C','D','E','F','G','H','I','J'};

        private int _handlesCount = 0;

        public PDFDocument(string fileName)
        {
            this.FullName = fileName;

            this.NumberOfPages = 0;
            this.PageLabelStart = 1;

            this.HasInfo = true;
            if (this.GetInfo() == -1)
            {
                this.HasInfo = false;
            }
            
        }

        /// <summary>
        /// Tells if it was possible to get informations about the pdf file
        /// using the dump_data function. If this value is FALSE, no operation can be
        /// done on the file.
        /// </summary>
        public bool HasInfo { get; private set; }

        /// <summary>
        /// Full path of the pdf file.
        /// </summary>
        public string FullName { get; private set; }
        
        /// <summary>
        /// Name of the pdf file.
        /// </summary>
        public string FileName
        {
            get
            {
                return Path.GetFileName(this.FullName);
            }
        }

        /// <summary>
        /// Total number of pages of the document.
        /// </summary>
        public int NumberOfPages { get; private set; }

        /// <summary>
        /// There can be 20 pages in a document, but the page counting could start from 50.
        /// In this case, PageLabelStart will be 50.
        /// You need to know this value because if a user selects, for example, 54 as start page
        /// you need to subtract this value from it in order to obtain the actual page to pass to pdftk.
        /// </summary>
        public int PageLabelStart { get; private set; }
        
        /// <summary>
        /// Gets informations about the pdf file with the "dump_data" function of pdftk.
        /// </summary>
        /// <returns>-1 if an error occurs</returns>
        private int GetInfo()
        {
            int ret = 0;

            //Handles possible errors of pdftk.
            try
            {
                //Creates a process for pdftk and sets its parameters.
                Process p = new Process();

                p.StartInfo.FileName = "pdftk.exe";
                p.StartInfo.WorkingDirectory = baseDir;

                p.StartInfo.CreateNoWindow = true;
                p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;

                //Sets pdftk command line arguments.
                //You must use quotation marks to specify command line arguments that have
                //spaces inside them, or they will be considered as different arguments.
                p.StartInfo.Arguments = "\"" + this.FullName + "\" dump_data output \"" + DUMP_DATA_FILE + "\" dont_ask";

                p.Start();
                p.WaitForExit();
                p.Close();

                if (File.Exists(DUMP_DATA_FILE))
                {
                    //Searches the informations inside pdftk dump_data file.
                    using (StreamReader sr = new StreamReader(DUMP_DATA_FILE))
                    {
                        String line;
                        while ((line = sr.ReadLine()) != null)
                        {
                            if (line.StartsWith("NumberOfPages"))
                            {
                                this.NumberOfPages = Int32.Parse(line.Remove(0, 15));
                            }

                            if (line.StartsWith("PageLabelStart"))
                            {
                                this.PageLabelStart = Int32.Parse(line.Remove(0, 16));
                            }
                        }
                    }
                }
                else
                {
                    ret = -1;
                }

            }
            catch
            {
                ret = -1;
            }
            finally
            {
                if (File.Exists(DUMP_DATA_FILE))
                    File.Delete(DUMP_DATA_FILE);
            }

            return ret;
        }

        /// <summary>
        /// Extracts contiguous pages from a pdf file and saves them into a new file.
        /// </summary>
        /// <param name="pageStart">First page to extract</param>
        /// <param name="pageEnd">Last page to extract</param>
        /// <param name="outputFileName">Path of the new file</param>
        /// <returns></returns>
        public SelectionStates ExtractPages(int pageStart, int pageEnd, string outputFileName)
        {
            SelectionStates state = SelectionStates.InsideDocument;

            if ((pageStart < 1) || (pageEnd > this.NumberOfPages) || (pageEnd < pageStart))
            {
                state = SelectionStates.OutOfDocument;
                return state;
            }

            string range = pageStart.ToString() + "-" + pageEnd.ToString();
            //string rangeEnd = pageEnd.ToString();

            if (File.Exists(outputFileName))
                File.Delete(outputFileName);
            
            Process p = new Process();

            p.StartInfo.FileName = "pdftk.exe";
            p.StartInfo.WorkingDirectory = baseDir;

            p.StartInfo.CreateNoWindow = true;
            p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;

            p.StartInfo.Arguments = "\"" + this.FullName + "\" cat " +
                range + " output \"" + outputFileName + "\"";

            p.Start();
            p.WaitForExit();
            p.Close();

            return state;
        }

        /// <summary>
        /// Deletes one or more contiguous pages from a pdf file.
        /// </summary>
        /// <param name="pageStart">First page to delete</param>
        /// <param name="pageEnd">Last page to delete</param>
        /// <param name="outputFileName">Path of the new file (original file without the selected pages)</param>
        /// <param name="overwriteOriginal">Tells if the program should overwrite the original file</param>
        /// <returns></returns>
        public SelectionStates DeletePages(int pageStart, int pageEnd, string outputFileName, bool overwriteOriginal)
        {
            SelectionStates state = SelectionStates.InsideDocument;

            if ((pageStart < 1) || (pageEnd > this.NumberOfPages) || (pageEnd < pageStart))
            {
                state = SelectionStates.OutOfDocument;
                return state;
            }

            string rangeStart = pageStart - 1 > 0 ? "1-" + (pageStart - 1).ToString() : "";
            string rangeEnd = pageEnd < this.NumberOfPages ? (pageEnd + 1).ToString() + "-end" : "";

            if ((rangeStart == "") && (rangeEnd == ""))
            {
                state = SelectionStates.EntireDocument;
                return state;
            }

            if (File.Exists(outputFileName))
                File.Delete(outputFileName);

            Process p = new Process();

            p.StartInfo.FileName = "pdftk.exe";
            p.StartInfo.WorkingDirectory = baseDir;

            p.StartInfo.CreateNoWindow = true;
            p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                
            p.StartInfo.Arguments = "\"" + this.FullName + "\" cat " +
                rangeStart + " " + rangeEnd + " output \"" + outputFileName + "\"";

            p.Start();
            p.WaitForExit();
            p.Close();

            return state;
        }

        /// <summary>
        /// Inserts pages of a pdf file into this document at a specified position.
        /// </summary>
        /// <param name="pageStart">Page to start insert from (after)</param>
        /// <param name="position">One of InsertPositions to start insert from</param>
        /// <param name="fileToMerge">Path of the file to merge with this document</param>
        /// <param name="outputFileName">Path of the new file</param>
        /// <returns></returns>
        public SelectionStates InsertPages(int pageStart, InsertPositions position, string fileToMerge, string outputFileName)
        {
            SelectionStates state = SelectionStates.InsideDocument;

            if ((pageStart < 0) || (pageStart > this.NumberOfPages))
            {
                state = SelectionStates.OutOfDocument;
                return state;
            }

            string range = "";

            if ((position == InsertPositions.Beginning) || (pageStart == 0))
            {
                range = "B A";
            }
            else if ((position == InsertPositions.End) || (pageStart == this.NumberOfPages))
            {
                range = "A B";
            }
            else
            {
                range = "A1-" + pageStart.ToString() + " B A" + (pageStart + 1).ToString() + "-end";
            }


            if (File.Exists(outputFileName))
                File.Delete(outputFileName);

            Process p = new Process();

            p.StartInfo.FileName = "pdftk.exe";
            p.StartInfo.WorkingDirectory = baseDir;

            p.StartInfo.CreateNoWindow = true;
            p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;

            p.StartInfo.Arguments = "A=\"" + this.FullName + "\" B=\"" + fileToMerge + "\" cat " +
                range + " output \"" + outputFileName + "\"";

            p.Start();
            p.WaitForExit();
            p.Close();

            return state;
        }

        /// <summary>
        /// Open the current PDF document with the default application.
        /// </summary>
        public void Open()
        {
            Process p = new Process();

            p.StartInfo.FileName = this.FullName;
            
            p.Start();
        }

        /// <summary>
        /// Open a PDF document with the default application.
        /// </summary>
        /// <param name="fileName">Path of the file to open</param>
        public static void Open(string fileName)
        {
            Process p = new Process();

            p.StartInfo.FileName = fileName;

            p.Start();
        }

        /// <summary>
        /// Open a PDF document with PDFRider.
        /// </summary>
        /// <param name="fileName">Path of the file to open</param>
        public static void OpenWithPdfRider(string fileName, string args)
        {
            Process p = new Process();

            p.StartInfo.FileName = Path.Combine(AppDomain.CurrentDomain.BaseDirectory,
                "PDFRider.exe");
            p.StartInfo.Arguments = "\"" + fileName + "\" " + args;
            
            p.Start();
        }
    }

    
}
